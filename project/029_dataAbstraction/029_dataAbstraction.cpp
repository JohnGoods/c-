#include <iostream>
using namespace std;

//数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。
//数据抽象是一种依赖于接口和实现分离的编程（设计）技术。
//让我们举一个现实生活中的真实例子，比如一台电视机，您可以打开和关闭、切换频道、调整音量、添加外部组件（如喇叭、录像机、DVD 播放器），
//但是您不知道它的内部实现细节，也就是说，您并不知道它是如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。
//因此，我们可以说电视把它的内部实现和外部接口分离开了，您无需知道它的内部实现原理，直接通过它的外部接口
//（比如电源按钮、遥控器、声量控制器）就可以操控电视。
//现在，让我们言归正传，就 C++ 编程而言，C++ 类为数据抽象提供了可能。它们向外界提供了大量用于操作对象数据的公共方法，也就是说，
//外界实际上并不清楚类的内部实现。
//例如，您的程序可以调用 sort() 函数，而不需要知道函数中排序数据所用到的算法。实际上，
//函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。

class Adder{
public:
	// 构造函数
	Adder(int i = 0)
	{
		total = i;
	}
	// 对外的接口
	void addNum(int number)
	{
		total += number;
	}
	// 对外的接口
	int getTotal()
	{
		return total;
	};
private:
	// 对外隐藏的数据
	int total;
};
int main()
{
	Adder a;
	a.addNum(10);
	a.addNum(20);
	a.addNum(30);
	cout << "Total " << a.getTotal() << endl;
	system("PAUSE");
	return 0;
}

//所有的 C++ 程序都有以下两个基本要素：
//程序语句（代码）：这是程序中执行动作的部分，它们被称为函数。
//程序数据：数据是程序的信息，会受到程序函数的影响。
//封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。数据封装引申出了另一个重要的 OOP 概念，即数据隐藏。
//数据封装是一种把数据和操作数据的函数捆绑在一起的机制，数据抽象是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。
//C++ 通过创建类来支持封装和数据隐藏（public、protected、private）。我们已经知道，类包含私有成员（private）、保护成员（protected）和公有成员（public）成员。默认情况下，在类中定义的所有项目都是私有的。例如：
//class Box
//{
//public:
//	double getVolume(void)
//	{
//		return length * breadth * height;
//	}
//private:
//	double length;      // 长度
//	double breadth;     // 宽度
//	double height;      // 高度
//};

//变量 length、breadth 和 height 都是私有的（private）。这意味着它们只能被 Box 类中的其他成员访问，
//而不能被程序中其他部分访问。这是实现封装的一种方式。
//为了使类中的成员变成公有的（即，程序中的其他部分也能访问），必须在这些成员前使用 public 关键字进行声明。
//所有定义在 public 标识符后边的变量或函数可以被程序中所有其他的函数访问。
//把一个类定义为另一个类的友元类，会暴露实现细节，从而降低了封装性。理想的做法是尽可能地对外隐藏每个类的实现细节